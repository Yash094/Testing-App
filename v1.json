{
  "meta": {
    "generator": "0.10.0",
    "format": 20,
    "date": 1625563708736
  },
  "custom": {
    "welcome": {
      "name": "Welcome",
      "files": {
        "welcome": {
          "name": "General",
          "type": "md",
          "content": "# Mongo-Eco - Welcome\n\nMongo-Eco is a powerful module that allows you to create economy system in your bot.\n\n<img src=\"https://nodei.co/npm/memer-api.png?downloads=true&amp;stars=true\" alt=\"NPM info\">\n\n## **Installation**\n```\nnpm install mongo-eco\n```\n\n```js\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n// use the methods\neco.<Method>(<Options>); //returns -> Promise -> \n```\n\n**Join our [Discord Server](https://discord.gg/emD44ZJaSA) for Support**\n\n**For more help view [Documentation ](https://mongo-eco.js.org)**\n\n**[Example Bot](https://github.com/Memer-Api/example-bot-memer-api) Made With Mongo Eco**\n\n## **Features**\n\n* **Super simple**\n* **Easy to use**\n* **Beginner-friendly**\n* **Great Support**\n* **Flexible**\n\n\n# HOW DOES IT WORK\n\n```\n\nconst economy = require(\"mongo-eco\");\n\nconst eco = new economy('YOUR MONGODB URI');\n\n\n```\n\n# EXAMPLE\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\neco.<Method>(<Options>); //returns -> Promise -> \n\n\n```\n\n\n",
          "path": "test/docs/welcome/welcome.md"
        }
      }
    },
    "methods": {
      "name": "Methods",
      "files": {
        "methods": {
          "name": "Methods",
          "type": "md",
          "content": "# Mongo-Eco\n## Every Method is structured the same! <method>(options)\n\n\n# METHODS\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n```\n\n### SetWeekly(GuildID,Amt) =>\nGuildID - Guild ID for the guild  \nAmt - Amount to set for weekly bonus\n\n> Returns: {   \n  gid: GuildID,    \n  shopItems: Array of items in shop,   \n  weeklyAmt: Amount to given weekly,   \n  dailyAmt: Amount to given daily  \n}\n\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.SetWeekly(GuildID,Amt).then(data => {\n      //<Channel>.send(`WEEKLY AMT HAS BEEN CHANGED TO ${data.weeklyAmt}`)\n})\n```\n\n### SetDaily(GuildID,Amt) =>\nGuildID - Guild ID for the guild  \nAmt - Amount to set for daily bonus\n\n> Returns: {    \n  gid: GuildID,    \n  shopItems: Array of items in shop,    \n  weeklyAmt: Amount to given weekly,    \n  dailyAmt: Amount to given daily   \n}\n\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.SetDaily(GuildID,Amt).then(data => {\n      //<Channel>.send(`DAILY AMT HAS BEEN CHANGED TO ${data.weeklyAmt}`)\n})\n```\n\n### Transfer(GuildID, User1ID, User2ID, Amt) => \nGuildID - Guild ID for the guild you want to remove the item\nUser1 - User Sending The Money            \nUser2 - Reciever      \nAmt: Amount To Transfer   \n\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.Transfer(GuildID, User1ID, User2ID, Amt).then(data => {\n      //<Channel>.send(`${data.Amt} Has Been Transfered From User1 to User2`)\n})\n```\n\n### RemoveItem(GuildID, ItemID) => \nGuildID - Guild ID for the guild you want to remove the item\nItemID - Item Id for the item you want to remove\n\n> Returns: {\n  gid: GuildID,     \n  shopItems: Array of items in shop,     \n  weeklyAmt: Amount to given weekly(IF SET ANY),\n  dailyAmt: Amount to given daily(IF SET ANY)   \n}\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.RemoveItem(GuildID, ItemID).then(data => {\n      //<Channel>.send(`${data.GuildID} Has Been Removed Shop`)\n})\n\n```\n### AddItem(GuildID, ItemName, Price, SellPrice) => \nGuildID - Guild ID for the guild you want to remove the item\nItemName - Name for the item    \nPrice - Price of the item    \nSellPrice - Selling Price if sold back to bot   \n\n> Returns: {      \n  gid: GuildID,      \n  shopItems: Array of items in shop,     \n  weeklyAmt: Amount to given weekly(IF SET ANY),          \n  dailyAmt: Amount to given daily(IF SET ANY)    \n}\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.AddItem(GuildID, ItemName, Price, SellPrice).then(data => {\n      //<Channel>.send(`${data.GuildID} Has Been Removed Shop`)\n})\n```\n\n### Buyitem(UserID, GuildID, ItemID) => \nUserID - Id of the user who wants to buy the item    \nGuildID - Guild ID for the guild    \nItemID - ID for the item    \n \n\n> Returns: {\n  userID: UserID,   \n  gid: GuildID,   \n  wallet: User's Wallet Amt,   \n  bank: User's Bank,  \n  inventory: [ { Name: '1st ietm', Price: 1000, Sell: 50, id: 0 }, { Name: '2nd ietm', Price: 2000, Sell: 100, id: 1 } ],   \n  lastUsedWeekly: Date And Time For Last Used Weekly Cmd\n}\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.Buyitem(UserID, GuildID, ItemID).then(data => {\n      //<Channel>.send(`Succesfully bought item`)\n})\n```\n\n### SellItem(UserID, GuildID, ItemID) => \nUserID - Id of the user who wants to sell the item    \nGuildID - Guild ID for the guild  \nItemID - ID for the item    \n \n\n> Returns: {\n  userID: UserID,   \n  gid: GuildID,   \n  wallet: User's Wallet Amt,   \n  bank: User's Bank,  \n  inventory: [ { Name: '1st ietm', Price: 1000, Sell: 50, id: 0 }, { Name: '2nd ietm', Price: 2000, Sell: 100, id: 1 } ],   \n  lastUsedWeekly: Date And Time For Last Used Weekly Cmd\n}\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.SellItem(UserID, GuildID, ItemID).then(data => {\n      //<Channel>.send(`Succesfully sold item`)\n})\n```\n\n### Daily(UserID, GuildID) => \nUserID - ID of the user  \nGuildID - Guild ID for the guild  \n\n\n> Returns: {     \n Users Updated Wallet Balance     \n}\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.Daily(UserID, GuildID).then(data => {\n      //<Channel>.send(`ADDED DAILY BONUS TO YOUR WALLET. CURRENT WALLET BALANCE - ${data}`)\n})\n```\n\n### Weekly(UserID, GuildID) => \nUserID - Id of the user   \nGuildID - Guild ID for the guild  \n\n\n> Returns: {     \n Users Updated Wallet Balance     \n}\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.Weekly(UserID, GuildID).then(data => {\n      //<Channel>.send(`ADDED WEEKLY BONUS TO YOUR WALLET. CURRENT WALLET BALANCE - ${data}`)\n})\n```\n\n### GetInv(UserID, GuildID) => \nUserID - Id of the user   \nGuildID - Guild ID for the guild  \n\n\n> Returns: User's inventory in a Array\n\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.GetInv(UserID, GuildID).then(data => {\n      //<Channel>.send(`Your inventory - ${data}`)\n})\n```\n\n\n### GetUser(UserID, GuildID) => \nUserID - Id of the user   \nGuildID - Guild ID for the guild  \n\n\n> Returns: {\n User's Profile Data\n}\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.GetUser(UserID, GuildID).then(data => {\n     \n})\n```\n\n### GetBal(UserID, GuildID) => \nUserID - Id of the user   \nGuildID - Guild ID for the guild  \n\n\n> Returns: {    \n User's Wallet Balance    \n}\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.GetBal(UserID, GuildID).then(data => {\n     //<Channel>.send(`Your Balance - ${data}`)\n})\n```\n\n### GetBankbal(UserID, GuildID) => \nUserID - Id of the user   \nGuildID - Guild ID for the guild  \n\n\n> Returns: {    \n User's Bank Balance    \n}\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.GetBankbal(UserID, GuildID).then(data => {\n     //<Channel>.send(`Your Bank Balance - ${data}`)\n})\n```\n\n### AddMoney(UserID, GuildID, Amt) => \nUserID - Id of the user   \nGuildID - Guild ID for the guild  \nAmt - Amount to add in wallet\n\n> Returns: {   \n User's Updated Balance   \n}\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.AddMoney(UserID, GuildID, Amt).then(data => {\n     //<Channel>.send(`Your Updated Balance - ${data}`)\n})\n```\n\n### RemoveMoney(UserID, GuildID, Amt) => \nUserID - Id of the user   \nGuildID - Guild ID for the guild  \nAmt - Amount to add in wallet\n\n> Returns: {    \n User's Updated Balance    \n} \n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.RemoveMoney(UserID, GuildID, Amt).then(data => {\n     //<Channel>.send(`Your Updated Balance - ${data}`)\n})\n```\n\n### LeaderBoard(GuildID) => \nGuildID - Guild ID for the guild  \n\n> Returns: {     \n User's Data According To Wallet Bal    \n}\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.LeaderBoard(GuildID).then(data => {\n  \n})\n```\n\n### Deposit(UserID, GuildID, Amt) => \nUserID - Id of the user   \nGuildID - Guild ID for the guild  \nAmt - Amount to add in wallet\n\n> Returns: {     \n\"wallet\": User's Wallet Balance,           \n\"Bank\": User's Bank Balance\n}\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.RemoveMoney(UserID, GuildID, Amt).then(data => {\n     //<Channel>.send(`Your Updated Balance - ${data.wallet}`)\n})\n```\n\n### Withdraw(UserID, GuildID, Amt) => \nUserID - Id of the user   \nGuildID - Guild ID for the guild  \nAmt - Amount to add in wallet\n\n> Returns: {     \n\"wallet\": User's Wallet Balance,           \n\"Bank\": User's Bank Balance\n}\n\n```\n//Import package\nconst economy = require(\"mongo-eco\");\n//create new economy() Class\nconst eco = new economy('YOUR MONGODB URI');\n\n\neco.Withdraw(UserID, GuildID, Amt).then(data => {\n     //<Channel>.send(`Your Updated Balance - ${data.wallet}`)\n})\n```\n",
          "path": "test/docs/methods/methods.md"
        }
      }
    }
  },
  "classes": [],
  "interfaces": [],
  "typedefs": [],
  "externals": []
}
